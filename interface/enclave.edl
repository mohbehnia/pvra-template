/*
 * Copyright (C) 2019 Intel Corporation
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */


enclave
{
	include "sgx_quote.h"

    trusted
    {
        #define BUFLEN 2048
        #define MBED_TLS_KEY_SIZE 2049
        #define MBEDTLS_MPI_MAX_SIZE 1024
        #define AES_128_KEY_SIZE 16

        public sgx_status_t ecall_initPVRA(
            [out] sgx_report_t *report,
            [in] sgx_target_info_t *target_info,
            [out, size=sealedstate_size] char *sealedstate,
            size_t sealedstate_size,
            [out, size=signature_size] char *enckey_signature, size_t signature_size,
            [out, size=enckey_size] char *pub_enckey, size_t enckey_size);

        public sgx_status_t ecall_commandPVRA(
            [in, size=sealedstate_size] char *sealedstate, size_t sealedstate_size,
            [in, size=signedFT_size] char *signedFT, size_t signedFT_size,
            [in, size=FT_size] char *FT, size_t FT_size,
            [in, size=eCMD_size] char *eCMD, size_t eCMD_size,
            [in, size=eAESkey_size] char *eAESkey, size_t eAESkey_size,
            [out, size=cResponse_size] char *cResponse, size_t cResponse_size, 
            [out, size=cRsig_size] char *cRsig, size_t cRsig_size,
            [out, size=sealedout_size] char *sealedout, size_t sealedout_size
            );

        public sgx_status_t ecall_key_gen_and_seal(
            [out, size=pubkey_size] char *pubkey,
            size_t pubkey_size,
            [out, size=sealedprivkey_size] char *sealedprivkey,
            size_t sealedprivkey_size);

        public sgx_status_t ecall_key_gen_and_seal_all(
            [out, size=sealedpubkey_size] char *sealedpubkey,
            size_t sealedpubkey_size,
            [out, size=sealedprivkey_size] char *sealedprivkey,
            size_t sealedprivkey_size);

        public sgx_status_t ecall_key_gen_vsc(
            [out, size=aes_gcm_key_size] uint8_t * aes_gcm_key, 
            size_t aes_gcm_key_size
        );

        public sgx_status_t ecall_generate_key_ecdsa(
          [out, size = BUFLEN] uint8_t * pub_key_buffer,
          [out, size = BUFLEN] uint8_t * priv_key_buffer
        );

        public sgx_status_t ecall_encrypt_aes(
            [in, size = AES_128_KEY_SIZE] uint8_t * aes_key,
            [in, size = BUFLEN] char * decMessageIn, 
            size_t lenIn, 
            [out, size = BUFLEN] char * encMessageOut
        );

        public sgx_status_t ecall_decrypt_aes(
            [in, size = AES_128_KEY_SIZE] uint8_t * aes_key,
            [in, size = BUFLEN] char * encMessageIn, 
            size_t lenIn, 
            [out, size = BUFLEN] char * decMessageOut
        ); 

        public sgx_status_t ecall_vsc(
          [in, size = AES_128_KEY_SIZE] uint8_t * aes_key, 
          [in, size = BUFLEN] uint8_t * enc_enclave_state_in, 
          size_t lenInEncEnclaveState, 
          [in, size = BUFLEN] uint8_t * enc_command, 
          size_t lenInEncCommand, 
          [in, size = BUFLEN] uint8_t * signature, 
          [in, size = BUFLEN] uint8_t * pub_key_buffer, 
          int counter, 
          [out] int building_access[1], 
          [out, size = BUFLEN] uint8_t * enc_enclave_state_out
        );

        public sgx_status_t ecall_create_client_input_json(
          [in, size = AES_128_KEY_SIZE] uint8_t * aes_key, 
          int uuid, 
          int command, 
          char result,
          [out, size = BUFLEN] uint8_t * encrypted_client_input_out
        );

        public sgx_status_t ecall_create_enclave_state_json(
            [in, size = AES_128_KEY_SIZE] uint8_t * aes_key,
            [out, size = BUFLEN] uint8_t * encrypted_enclave_out
        );

        public sgx_status_t ecall_enclave_state_add_user(
            [in, size = AES_128_KEY_SIZE] uint8_t * aes_key,
            [in, size = BUFLEN] uint8_t * enc_enclave_state_in,
            size_t lenIn,
            [out, size = BUFLEN] uint8_t * new_enc_enclave_state_out
        );

        public sgx_status_t ecall_get_total_counter(
          [in, size = AES_128_KEY_SIZE] uint8_t * aes_key, 
          [in, size = BUFLEN] uint8_t * enc_enclave_state_in, 
          size_t lenIn,
          [out] int total_counter[1]
        );

        public sgx_status_t ecall_enclave_state_add_counter_mismatch(
          [in, size = AES_128_KEY_SIZE] uint8_t * aes_key, 
          int delta,
          [in, size = BUFLEN] uint8_t * enc_enclave_state_in, 
          size_t lenIn, 
          [in, size = BUFLEN] uint8_t * enc_cli_in, 
          size_t lenInCliIn, 
          [out, size = BUFLEN] uint8_t * new_enc_enclave_state_out
        );

        public sgx_status_t ecall_enclave_state_status_query(
            [in, size = AES_128_KEY_SIZE] uint8_t * aes_key, 
            [in, size = BUFLEN] uint8_t * enc_enclave_state_in, 
            size_t lenIn, 
            int uuid,
            [out] int building_access[1],
            [out, size = BUFLEN] uint8_t * new_enc_enclave_state_out
        );

        public sgx_status_t ecall_enclave_state_status_update(
          [in, size = AES_128_KEY_SIZE] uint8_t * aes_key, 
          [in, size = BUFLEN] uint8_t * enc_enclave_state_in, 
          size_t lenIn, 
          int uuid,
          char result,
          [out, size = BUFLEN] uint8_t * new_enc_enclave_state_out
        );

        public sgx_status_t ecall_hash_enclave_state_and_command(
          [in, size = BUFLEN] uint8_t * enclave_state_in, 
          size_t lenInEnclaveState, 
          [in, size = BUFLEN] uint8_t * cli_in,
          size_t lenInCliIn,
          [out] uint8_t hash[32]
        );

        public sgx_status_t ecall_mbed_sign_enclave_state_and_command_signature(
          [in, size = BUFLEN] uint8_t * enclave_state_in, 
          size_t lenInEnclaveState, 
          [in, size = BUFLEN] uint8_t * cli_in, 
          size_t lenInCliIn,
          int counter,
          [out, size = MBED_TLS_KEY_SIZE] uint8_t * priv_key_buffer, 
          [out, size = MBED_TLS_KEY_SIZE] uint8_t * pub_key_buffer,
          [out, size = MBEDTLS_MPI_MAX_SIZE] uint8_t * signature
        );

        public sgx_status_t ecall_mbed_verify_enclave_state_and_command_signature(
          [in, size = BUFLEN] uint8_t * enclave_state_in, 
          size_t lenInEnclaveState, 
          [in, size = BUFLEN] uint8_t * cli_in, 
          size_t lenInCliIn,
          int counter,
          [in, size = BUFLEN] uint8_t * public_key_buffer, 
          [in, size = MBEDTLS_MPI_MAX_SIZE] uint8_t * signature
        );

        public sgx_status_t ecall_verify_enclave_state_and_command_signature(
          [in, size = BUFLEN] uint8_t * enclave_state_in, 
          size_t lenInEnclaveState, 
          [in, size = BUFLEN] uint8_t * cli_in, 
          size_t lenInCliIn,
          int counter,
          [in, size = BUFLEN] uint8_t * private_key_buffer, 
          [in, size = BUFLEN] uint8_t * signature,
          [out, size = BUFLEN] uint8_t * result
        ); 

        public sgx_status_t ecall_sign_enclave_state_and_command(
          [in, size = BUFLEN] uint8_t * enclave_state_in, 
          size_t lenInEnclaveState, 
          [in, size = BUFLEN] uint8_t * cli_in, 
          size_t lenInCliIn,
          int counter,
          [in, size = BUFLEN] uint8_t * private_key_buffer,
          [out, size = BUFLEN] uint8_t * signature
        );

        public sgx_status_t ecall_calc_buffer_sizes(
            [out] size_t* epubkey_size,
            [out] size_t* esealedpubkey_size,
            [out] size_t* esealedprivkey_size,
            [out] size_t* esignature_size);

        public sgx_status_t ecall_unseal_and_sign(
            [in, size=msg_size] uint8_t * msg,
            uint32_t msg_size,
            [in, size=sealed_size]char *sealed,
            size_t sealed_size,
            [out, size=signature_size] char* signature,
            size_t signature_size);
        
        public sgx_status_t ecall_unseal_and_quote(
            [out] sgx_report_t *report,
            [in] sgx_target_info_t *target_info,
            [in, size=sealed_size]char *sealed,
            size_t sealed_size,
            [out, size=public_key_size] char *public_key,
            size_t public_key_size);

		public sgx_status_t ecall_report_gen(
            [out] sgx_report_t *report,
            [in] sgx_target_info_t *target_info,
            sgx_report_data_t report_data);

        #undef BUFLEN
        #undef MBED_TLS_KEY_SIZE
        #undef MBEDTLS_MPI_MAX_SIZE
    };

    untrusted
    {
        void ocall_print_string([in, string] const char *str);
        void ocall_rdtsc(void);
        void ocallbuf(int size);
        //void ocall_print_int([in, int] const int num);
    };
};
